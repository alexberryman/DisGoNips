// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package turnips

import (
	"context"
	"database/sql"
)

const countUsersByDiscordId = `-- name: CountUsersByDiscordId :one
SELECT count(*)
FROM users
where discord_id = $1
`

func (q *Queries) CountUsersByDiscordId(ctx context.Context, discordID string) (int64, error) {
	row := q.queryRow(ctx, q.countUsersByDiscordIdStmt, countUsersByDiscordId, discordID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (discord_id, username)
VALUES ($1, $2)
RETURNING id, username, discord_id, friend_code, time_zone
`

type CreateUserParams struct {
	DiscordID string `json:"discord_id"`
	Username  string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.DiscordID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiscordID,
		&i.FriendCode,
		&i.TimeZone,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE discord_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, discordID string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, discordID)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT id, username, discord_id, friend_code, time_zone
FROM users
WHERE discord_id = $1
LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, discordID string) (User, error) {
	row := q.queryRow(ctx, q.getUsersStmt, getUsers, discordID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiscordID,
		&i.FriendCode,
		&i.TimeZone,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, discord_id, friend_code, time_zone
FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DiscordID,
			&i.FriendCode,
			&i.TimeZone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendCode = `-- name: UpdateFriendCode :one
UPDATE users
set friend_code = $2
where discord_id = $1
RETURNING id, username, discord_id, friend_code, time_zone
`

type UpdateFriendCodeParams struct {
	DiscordID  string         `json:"discord_id"`
	FriendCode sql.NullString `json:"friend_code"`
}

func (q *Queries) UpdateFriendCode(ctx context.Context, arg UpdateFriendCodeParams) (User, error) {
	row := q.queryRow(ctx, q.updateFriendCodeStmt, updateFriendCode, arg.DiscordID, arg.FriendCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiscordID,
		&i.FriendCode,
		&i.TimeZone,
	)
	return i, err
}

const updateTimeZone = `-- name: UpdateTimeZone :one
UPDATE users
set time_zone = $2
where discord_id = $1
RETURNING id, username, discord_id, friend_code, time_zone
`

type UpdateTimeZoneParams struct {
	DiscordID string `json:"discord_id"`
	TimeZone  string `json:"time_zone"`
}

func (q *Queries) UpdateTimeZone(ctx context.Context, arg UpdateTimeZoneParams) (User, error) {
	row := q.queryRow(ctx, q.updateTimeZoneStmt, updateTimeZone, arg.DiscordID, arg.TimeZone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiscordID,
		&i.FriendCode,
		&i.TimeZone,
	)
	return i, err
}
