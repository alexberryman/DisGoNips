// Code generated by sqlc. DO NOT EDIT.
// source: prices.sql

package turnips

import (
	"context"
)

const countPricesByDiscordId = `-- name: CountPricesByDiscordId :one
SELECT count(*)
FROM prices
where discord_id = $1
`

func (q *Queries) CountPricesByDiscordId(ctx context.Context, discordID string) (int64, error) {
	row := q.queryRow(ctx, q.countPricesByDiscordIdStmt, countPricesByDiscordId, discordID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPrice = `-- name: CreatePrice :one
INSERT INTO prices (discord_id, price, meridiem, day_of_week, day_of_year, year)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, discord_id, price, meridiem, day_of_week, day_of_year, year, created_at
`

type CreatePriceParams struct {
	DiscordID string   `json:"discord_id"`
	Price     int32    `json:"price"`
	Meridiem  Meridiem `json:"meridiem"`
	DayOfWeek int32    `json:"day_of_week"`
	DayOfYear int32    `json:"day_of_year"`
	Year      int32    `json:"year"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.queryRow(ctx, q.createPriceStmt, createPrice,
		arg.DiscordID,
		arg.Price,
		arg.Meridiem,
		arg.DayOfWeek,
		arg.DayOfYear,
		arg.Year,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Price,
		&i.Meridiem,
		&i.DayOfWeek,
		&i.DayOfYear,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}

const deletePricesForUser = `-- name: DeletePricesForUser :exec
DELETE
FROM prices
WHERE discord_id = $1
`

func (q *Queries) DeletePricesForUser(ctx context.Context, discordID string) error {
	_, err := q.exec(ctx, q.deletePricesForUserStmt, deletePricesForUser, discordID)
	return err
}

const getWeeksPriceHistoryByUser = `-- name: GetWeeksPriceHistoryByUser :many
SELECT id, discord_id, price, meridiem, day_of_week, day_of_year, year, created_at
FROM prices
WHERE discord_id = $1
  and day_of_year > extract(DOY FROM now()) - 7
  and year = extract(year from now())
order by day_of_year, meridiem
`

func (q *Queries) GetWeeksPriceHistoryByUser(ctx context.Context, discordID string) ([]Price, error) {
	rows, err := q.query(ctx, q.getWeeksPriceHistoryByUserStmt, getWeeksPriceHistoryByUser, discordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.DiscordID,
			&i.Price,
			&i.Meridiem,
			&i.DayOfWeek,
			&i.DayOfYear,
			&i.Year,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrices = `-- name: ListPrices :many
SELECT id, discord_id, price, meridiem, day_of_week, day_of_year, year, created_at
FROM prices
ORDER BY created_at
`

func (q *Queries) ListPrices(ctx context.Context) ([]Price, error) {
	rows, err := q.query(ctx, q.listPricesStmt, listPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.DiscordID,
			&i.Price,
			&i.Meridiem,
			&i.DayOfWeek,
			&i.DayOfYear,
			&i.Year,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrice = `-- name: UpdatePrice :one
update prices
set price = $2
where discord_id = $1
  and meridiem = $3
  and day_of_week = $4
  and day_of_year = $5
  and year = $6
returning id, discord_id, price, meridiem, day_of_week, day_of_year, year, created_at
`

type UpdatePriceParams struct {
	DiscordID string   `json:"discord_id"`
	Price     int32    `json:"price"`
	Meridiem  Meridiem `json:"meridiem"`
	DayOfWeek int32    `json:"day_of_week"`
	DayOfYear int32    `json:"day_of_year"`
	Year      int32    `json:"year"`
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) (Price, error) {
	row := q.queryRow(ctx, q.updatePriceStmt, updatePrice,
		arg.DiscordID,
		arg.Price,
		arg.Meridiem,
		arg.DayOfWeek,
		arg.DayOfYear,
		arg.Year,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Price,
		&i.Meridiem,
		&i.DayOfWeek,
		&i.DayOfYear,
		&i.Year,
		&i.CreatedAt,
	)
	return i, err
}
