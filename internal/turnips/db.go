// Code generated by sqlc. DO NOT EDIT.

package turnips

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countPricesByDiscordIdStmt, err = db.PrepareContext(ctx, countPricesByDiscordId); err != nil {
		return nil, fmt.Errorf("error preparing query CountPricesByDiscordId: %w", err)
	}
	if q.countUsersByDiscordIdStmt, err = db.PrepareContext(ctx, countUsersByDiscordId); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsersByDiscordId: %w", err)
	}
	if q.createPriceStmt, err = db.PrepareContext(ctx, createPrice); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePrice: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deletePricesForUserStmt, err = db.PrepareContext(ctx, deletePricesForUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePricesForUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.getWeeksPriceHistoryByUserStmt, err = db.PrepareContext(ctx, getWeeksPriceHistoryByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeeksPriceHistoryByUser: %w", err)
	}
	if q.listPricesStmt, err = db.PrepareContext(ctx, listPrices); err != nil {
		return nil, fmt.Errorf("error preparing query ListPrices: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateFriendCodeStmt, err = db.PrepareContext(ctx, updateFriendCode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFriendCode: %w", err)
	}
	if q.updateTimeZoneStmt, err = db.PrepareContext(ctx, updateTimeZone); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTimeZone: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countPricesByDiscordIdStmt != nil {
		if cerr := q.countPricesByDiscordIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPricesByDiscordIdStmt: %w", cerr)
		}
	}
	if q.countUsersByDiscordIdStmt != nil {
		if cerr := q.countUsersByDiscordIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersByDiscordIdStmt: %w", cerr)
		}
	}
	if q.createPriceStmt != nil {
		if cerr := q.createPriceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPriceStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deletePricesForUserStmt != nil {
		if cerr := q.deletePricesForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePricesForUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.getWeeksPriceHistoryByUserStmt != nil {
		if cerr := q.getWeeksPriceHistoryByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeeksPriceHistoryByUserStmt: %w", cerr)
		}
	}
	if q.listPricesStmt != nil {
		if cerr := q.listPricesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPricesStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateFriendCodeStmt != nil {
		if cerr := q.updateFriendCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFriendCodeStmt: %w", cerr)
		}
	}
	if q.updateTimeZoneStmt != nil {
		if cerr := q.updateTimeZoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTimeZoneStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	countPricesByDiscordIdStmt     *sql.Stmt
	countUsersByDiscordIdStmt      *sql.Stmt
	createPriceStmt                *sql.Stmt
	createUserStmt                 *sql.Stmt
	deletePricesForUserStmt        *sql.Stmt
	deleteUserStmt                 *sql.Stmt
	getUsersStmt                   *sql.Stmt
	getWeeksPriceHistoryByUserStmt *sql.Stmt
	listPricesStmt                 *sql.Stmt
	listUsersStmt                  *sql.Stmt
	updateFriendCodeStmt           *sql.Stmt
	updateTimeZoneStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		countPricesByDiscordIdStmt:     q.countPricesByDiscordIdStmt,
		countUsersByDiscordIdStmt:      q.countUsersByDiscordIdStmt,
		createPriceStmt:                q.createPriceStmt,
		createUserStmt:                 q.createUserStmt,
		deletePricesForUserStmt:        q.deletePricesForUserStmt,
		deleteUserStmt:                 q.deleteUserStmt,
		getUsersStmt:                   q.getUsersStmt,
		getWeeksPriceHistoryByUserStmt: q.getWeeksPriceHistoryByUserStmt,
		listPricesStmt:                 q.listPricesStmt,
		listUsersStmt:                  q.listUsersStmt,
		updateFriendCodeStmt:           q.updateFriendCodeStmt,
		updateTimeZoneStmt:             q.updateTimeZoneStmt,
	}
}
