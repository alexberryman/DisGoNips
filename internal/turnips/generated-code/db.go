// Code generated by sqlc. DO NOT EDIT.

package turnips

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAccountsByDiscordIdStmt, err = db.PrepareContext(ctx, countAccountsByDiscordId); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccountsByDiscordId: %w", err)
	}
	if q.countNicknameByDiscordIdStmt, err = db.PrepareContext(ctx, countNicknameByDiscordId); err != nil {
		return nil, fmt.Errorf("error preparing query CountNicknameByDiscordId: %w", err)
	}
	if q.countPricesByDiscordIdStmt, err = db.PrepareContext(ctx, countPricesByDiscordId); err != nil {
		return nil, fmt.Errorf("error preparing query CountPricesByDiscordId: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createNicknameStmt, err = db.PrepareContext(ctx, createNickname); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNickname: %w", err)
	}
	if q.createPriceStmt, err = db.PrepareContext(ctx, createPrice); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePrice: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteNicknameStmt, err = db.PrepareContext(ctx, deleteNickname); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNickname: %w", err)
	}
	if q.deletePricesForUserStmt, err = db.PrepareContext(ctx, deletePricesForUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePricesForUser: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getHistoricalWeekPriceHistoryByAccountStmt, err = db.PrepareContext(ctx, getHistoricalWeekPriceHistoryByAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetHistoricalWeekPriceHistoryByAccount: %w", err)
	}
	if q.getHistoricalWeekPriceHistoryByServerStmt, err = db.PrepareContext(ctx, getHistoricalWeekPriceHistoryByServer); err != nil {
		return nil, fmt.Errorf("error preparing query GetHistoricalWeekPriceHistoryByServer: %w", err)
	}
	if q.getNicknameStmt, err = db.PrepareContext(ctx, getNickname); err != nil {
		return nil, fmt.Errorf("error preparing query GetNickname: %w", err)
	}
	if q.getWeeksPriceHistoryByAccountStmt, err = db.PrepareContext(ctx, getWeeksPriceHistoryByAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeeksPriceHistoryByAccount: %w", err)
	}
	if q.getWeeksPriceHistoryByServerStmt, err = db.PrepareContext(ctx, getWeeksPriceHistoryByServer); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeeksPriceHistoryByServer: %w", err)
	}
	if q.listAccountsStmt, err = db.PrepareContext(ctx, listAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListAccounts: %w", err)
	}
	if q.listNicknamesStmt, err = db.PrepareContext(ctx, listNicknames); err != nil {
		return nil, fmt.Errorf("error preparing query ListNicknames: %w", err)
	}
	if q.listPricesStmt, err = db.PrepareContext(ctx, listPrices); err != nil {
		return nil, fmt.Errorf("error preparing query ListPrices: %w", err)
	}
	if q.updateNicknameStmt, err = db.PrepareContext(ctx, updateNickname); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNickname: %w", err)
	}
	if q.updatePriceStmt, err = db.PrepareContext(ctx, updatePrice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePrice: %w", err)
	}
	if q.updateTimeZoneStmt, err = db.PrepareContext(ctx, updateTimeZone); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTimeZone: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAccountsByDiscordIdStmt != nil {
		if cerr := q.countAccountsByDiscordIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountsByDiscordIdStmt: %w", cerr)
		}
	}
	if q.countNicknameByDiscordIdStmt != nil {
		if cerr := q.countNicknameByDiscordIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNicknameByDiscordIdStmt: %w", cerr)
		}
	}
	if q.countPricesByDiscordIdStmt != nil {
		if cerr := q.countPricesByDiscordIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPricesByDiscordIdStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createNicknameStmt != nil {
		if cerr := q.createNicknameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNicknameStmt: %w", cerr)
		}
	}
	if q.createPriceStmt != nil {
		if cerr := q.createPriceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPriceStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteNicknameStmt != nil {
		if cerr := q.deleteNicknameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNicknameStmt: %w", cerr)
		}
	}
	if q.deletePricesForUserStmt != nil {
		if cerr := q.deletePricesForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePricesForUserStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getHistoricalWeekPriceHistoryByAccountStmt != nil {
		if cerr := q.getHistoricalWeekPriceHistoryByAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHistoricalWeekPriceHistoryByAccountStmt: %w", cerr)
		}
	}
	if q.getHistoricalWeekPriceHistoryByServerStmt != nil {
		if cerr := q.getHistoricalWeekPriceHistoryByServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHistoricalWeekPriceHistoryByServerStmt: %w", cerr)
		}
	}
	if q.getNicknameStmt != nil {
		if cerr := q.getNicknameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNicknameStmt: %w", cerr)
		}
	}
	if q.getWeeksPriceHistoryByAccountStmt != nil {
		if cerr := q.getWeeksPriceHistoryByAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeeksPriceHistoryByAccountStmt: %w", cerr)
		}
	}
	if q.getWeeksPriceHistoryByServerStmt != nil {
		if cerr := q.getWeeksPriceHistoryByServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeeksPriceHistoryByServerStmt: %w", cerr)
		}
	}
	if q.listAccountsStmt != nil {
		if cerr := q.listAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAccountsStmt: %w", cerr)
		}
	}
	if q.listNicknamesStmt != nil {
		if cerr := q.listNicknamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNicknamesStmt: %w", cerr)
		}
	}
	if q.listPricesStmt != nil {
		if cerr := q.listPricesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPricesStmt: %w", cerr)
		}
	}
	if q.updateNicknameStmt != nil {
		if cerr := q.updateNicknameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNicknameStmt: %w", cerr)
		}
	}
	if q.updatePriceStmt != nil {
		if cerr := q.updatePriceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePriceStmt: %w", cerr)
		}
	}
	if q.updateTimeZoneStmt != nil {
		if cerr := q.updateTimeZoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTimeZoneStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                         DBTX
	tx                                         *sql.Tx
	countAccountsByDiscordIdStmt               *sql.Stmt
	countNicknameByDiscordIdStmt               *sql.Stmt
	countPricesByDiscordIdStmt                 *sql.Stmt
	createAccountStmt                          *sql.Stmt
	createNicknameStmt                         *sql.Stmt
	createPriceStmt                            *sql.Stmt
	deleteAccountStmt                          *sql.Stmt
	deleteNicknameStmt                         *sql.Stmt
	deletePricesForUserStmt                    *sql.Stmt
	getAccountStmt                             *sql.Stmt
	getHistoricalWeekPriceHistoryByAccountStmt *sql.Stmt
	getHistoricalWeekPriceHistoryByServerStmt  *sql.Stmt
	getNicknameStmt                            *sql.Stmt
	getWeeksPriceHistoryByAccountStmt          *sql.Stmt
	getWeeksPriceHistoryByServerStmt           *sql.Stmt
	listAccountsStmt                           *sql.Stmt
	listNicknamesStmt                          *sql.Stmt
	listPricesStmt                             *sql.Stmt
	updateNicknameStmt                         *sql.Stmt
	updatePriceStmt                            *sql.Stmt
	updateTimeZoneStmt                         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		countAccountsByDiscordIdStmt: q.countAccountsByDiscordIdStmt,
		countNicknameByDiscordIdStmt: q.countNicknameByDiscordIdStmt,
		countPricesByDiscordIdStmt:   q.countPricesByDiscordIdStmt,
		createAccountStmt:            q.createAccountStmt,
		createNicknameStmt:           q.createNicknameStmt,
		createPriceStmt:              q.createPriceStmt,
		deleteAccountStmt:            q.deleteAccountStmt,
		deleteNicknameStmt:           q.deleteNicknameStmt,
		deletePricesForUserStmt:      q.deletePricesForUserStmt,
		getAccountStmt:               q.getAccountStmt,
		getHistoricalWeekPriceHistoryByAccountStmt: q.getHistoricalWeekPriceHistoryByAccountStmt,
		getHistoricalWeekPriceHistoryByServerStmt:  q.getHistoricalWeekPriceHistoryByServerStmt,
		getNicknameStmt:                   q.getNicknameStmt,
		getWeeksPriceHistoryByAccountStmt: q.getWeeksPriceHistoryByAccountStmt,
		getWeeksPriceHistoryByServerStmt:  q.getWeeksPriceHistoryByServerStmt,
		listAccountsStmt:                  q.listAccountsStmt,
		listNicknamesStmt:                 q.listNicknamesStmt,
		listPricesStmt:                    q.listPricesStmt,
		updateNicknameStmt:                q.updateNicknameStmt,
		updatePriceStmt:                   q.updatePriceStmt,
		updateTimeZoneStmt:                q.updateTimeZoneStmt,
	}
}
